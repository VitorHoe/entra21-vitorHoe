git config --global user.name "nome" //salva o nome

git config --global user.email "email" // salva o email

git config --global --list // mostra o nome e email

git clone // clona o arquivo

git commit -a -m "Adiciona o arquivo index.html"

git add . // adiciona o arquivo pra commit

git reset (hash) 
-- soft // reseta mas mantem arquivos
-- hard // reseta e não mantem arquivos

undo last commit // volta para o ultimo commit

git status // da pra ver as branchs

git push // enviar para o git o que foi feito

git branch // mostra as branchs

git branch nome/numero // criar branch

git checkout -b <branch> // criar e entrar na branch

git checkout // navegar entre branchs

git branch -D <branch> // deletar uma branch

git push origin <branch> // dar push em uma branch especifica

git fetch // puxa as alterações sem fazer o merge

git merge main

git merge --no-ff bug/142

npm init // cria um package.json

-y // yes for all

npm cowsay // vaquinha

node (nome do arquivo) // executar o arquilo (tem q estar selecionado)
https://nodejs.dev/learn/semantic-versioning-using-npm

npx // rodar os comandos das bibliotecas
npm // abrir e baixar bibliotecas




SELECT
m.nome,
sum(p.valor) total_valor
FROM
marcas m
INNER JOIN
produtos p
ON
p.id_marca = m.id
WHERE p.nome = 'Apple'
GROUP BY m.nome
HAVING sum(p.valor) > 3000
ORDER BY m.nome;


SELECT
m.nome,
p.nome,
max(p.valor)
FROM
marcas m
INNER JOIN
produtos p
ON
m.id = p.id_marca
GROUP BY p.nome, m.nome
ORDER BY p.nome DESC
LIMIT 1;


CREATE TABLE IF NOT EXISTS vendas (
id_nf integer,
id_item integer,
cod_prod integer NOT NULL,
valor_unit numeric NOT NULL,
quantidade integer NOT NULL,
desconto numeric,
PRIMARY KEY (id_nf, id_item)
);

INSERT INTO
vendas
VALUES
(1, 1, 1, 25.00, 10, 5),
(1, 2, 2, 13.00, 3, null),
(1, 3, 3, 15.00, 2, null),
(1, 4, 4, 10.00, 1, null),
(1, 5, 5, 30.00, 1, null),
(2, 1, 3, 15.00, 4, null),
(2, 2, 4, 10.00, 5, null),
(2, 3, 5, 30.00, 7, null),
(3, 1, 1, 25.00, 5, null),
(3, 2, 4, 10.00, 4, null),
(3, 3, 5, 30.00, 5, null),
(3, 4, 2, 13.50, 7, null),
(4, 1, 5, 30.00, 10, 15),
(4, 2, 4, 10.00, 12, 5),
(4, 3, 1, 25.00, 13, 5),
(4, 4, 2, 13.00, 15, 5),
(5, 1, 3, 15.00, 3, null),
(5, 2, 5, 30.00, 6, null),
(6, 1, 1, 25.00, 22, 15),
(6, 2, 3, 15.00, 25, 20),
(7, 1, 1, 25.00, 10, 3),
(7, 2, 2, 13.50, 10, 4),
(7, 3, 3, 15.00, 10, 4),
(7, 4, 5, 30.00, 10, 1);